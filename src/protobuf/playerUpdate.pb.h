// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playerUpdate.proto

#ifndef PROTOBUF_playerUpdate_2eproto__INCLUDED
#define PROTOBUF_playerUpdate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_playerUpdate_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsUnitImpl();
void InitDefaultsUnit();
void InitDefaultsPointImpl();
void InitDefaultsPoint();
void InitDefaultsHitBoxImpl();
void InitDefaultsHitBox();
void InitDefaultsPlayerUpdateImpl();
void InitDefaultsPlayerUpdate();
void InitDefaultsPositionUpdateImpl();
void InitDefaultsPositionUpdate();
void InitDefaultsTestMessageImpl();
void InitDefaultsTestMessage();
inline void InitDefaults() {
  InitDefaultsUnit();
  InitDefaultsPoint();
  InitDefaultsHitBox();
  InitDefaultsPlayerUpdate();
  InitDefaultsPositionUpdate();
  InitDefaultsTestMessage();
}
}  // namespace protobuf_playerUpdate_2eproto
namespace gamemessages {
class HitBox;
class HitBoxDefaultTypeInternal;
extern HitBoxDefaultTypeInternal _HitBox_default_instance_;
class PlayerUpdate;
class PlayerUpdateDefaultTypeInternal;
extern PlayerUpdateDefaultTypeInternal _PlayerUpdate_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class PositionUpdate;
class PositionUpdateDefaultTypeInternal;
extern PositionUpdateDefaultTypeInternal _PositionUpdate_default_instance_;
class TestMessage;
class TestMessageDefaultTypeInternal;
extern TestMessageDefaultTypeInternal _TestMessage_default_instance_;
class Unit;
class UnitDefaultTypeInternal;
extern UnitDefaultTypeInternal _Unit_default_instance_;
}  // namespace gamemessages
namespace gamemessages {

// ===================================================================

class Unit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gamemessages.Unit) */ {
 public:
  Unit();
  virtual ~Unit();

  Unit(const Unit& from);

  inline Unit& operator=(const Unit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Unit(Unit&& from) noexcept
    : Unit() {
    *this = ::std::move(from);
  }

  inline Unit& operator=(Unit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Unit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Unit* internal_default_instance() {
    return reinterpret_cast<const Unit*>(
               &_Unit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Unit* other);
  friend void swap(Unit& a, Unit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Unit* New() const PROTOBUF_FINAL { return New(NULL); }

  Unit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Unit& from);
  void MergeFrom(const Unit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Unit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gamemessages.Point position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::gamemessages::Point& position() const;
  ::gamemessages::Point* release_position();
  ::gamemessages::Point* mutable_position();
  void set_allocated_position(::gamemessages::Point* position);

  // required .gamemessages.Point velocity = 2;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  const ::gamemessages::Point& velocity() const;
  ::gamemessages::Point* release_velocity();
  ::gamemessages::Point* mutable_velocity();
  void set_allocated_velocity(::gamemessages::Point* velocity);

  // required int32 facing = 5;
  bool has_facing() const;
  void clear_facing();
  static const int kFacingFieldNumber = 5;
  ::google::protobuf::int32 facing() const;
  void set_facing(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gamemessages.Unit)
 private:
  void set_has_position();
  void clear_has_position();
  void set_has_velocity();
  void clear_has_velocity();
  void set_has_facing();
  void clear_has_facing();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::gamemessages::Point* position_;
  ::gamemessages::Point* velocity_;
  ::google::protobuf::int32 facing_;
  friend struct ::protobuf_playerUpdate_2eproto::TableStruct;
  friend void ::protobuf_playerUpdate_2eproto::InitDefaultsUnitImpl();
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gamemessages.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const PROTOBUF_FINAL { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gamemessages.Point)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend struct ::protobuf_playerUpdate_2eproto::TableStruct;
  friend void ::protobuf_playerUpdate_2eproto::InitDefaultsPointImpl();
};
// -------------------------------------------------------------------

class HitBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gamemessages.HitBox) */ {
 public:
  HitBox();
  virtual ~HitBox();

  HitBox(const HitBox& from);

  inline HitBox& operator=(const HitBox& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HitBox(HitBox&& from) noexcept
    : HitBox() {
    *this = ::std::move(from);
  }

  inline HitBox& operator=(HitBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HitBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HitBox* internal_default_instance() {
    return reinterpret_cast<const HitBox*>(
               &_HitBox_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(HitBox* other);
  friend void swap(HitBox& a, HitBox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HitBox* New() const PROTOBUF_FINAL { return New(NULL); }

  HitBox* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HitBox& from);
  void MergeFrom(const HitBox& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HitBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gamemessages.Point points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  const ::gamemessages::Point& points(int index) const;
  ::gamemessages::Point* mutable_points(int index);
  ::gamemessages::Point* add_points();
  ::google::protobuf::RepeatedPtrField< ::gamemessages::Point >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::gamemessages::Point >&
      points() const;

  // @@protoc_insertion_point(class_scope:gamemessages.HitBox)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gamemessages::Point > points_;
  friend struct ::protobuf_playerUpdate_2eproto::TableStruct;
  friend void ::protobuf_playerUpdate_2eproto::InitDefaultsHitBoxImpl();
};
// -------------------------------------------------------------------

class PlayerUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gamemessages.PlayerUpdate) */ {
 public:
  PlayerUpdate();
  virtual ~PlayerUpdate();

  PlayerUpdate(const PlayerUpdate& from);

  inline PlayerUpdate& operator=(const PlayerUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerUpdate(PlayerUpdate&& from) noexcept
    : PlayerUpdate() {
    *this = ::std::move(from);
  }

  inline PlayerUpdate& operator=(PlayerUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerUpdate* internal_default_instance() {
    return reinterpret_cast<const PlayerUpdate*>(
               &_PlayerUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PlayerUpdate* other);
  friend void swap(PlayerUpdate& a, PlayerUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerUpdate& from);
  void MergeFrom(const PlayerUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gamemessages.Unit player = 1;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 1;
  const ::gamemessages::Unit& player() const;
  ::gamemessages::Unit* release_player();
  ::gamemessages::Unit* mutable_player();
  void set_allocated_player(::gamemessages::Unit* player);

  // @@protoc_insertion_point(class_scope:gamemessages.PlayerUpdate)
 private:
  void set_has_player();
  void clear_has_player();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::gamemessages::Unit* player_;
  friend struct ::protobuf_playerUpdate_2eproto::TableStruct;
  friend void ::protobuf_playerUpdate_2eproto::InitDefaultsPlayerUpdateImpl();
};
// -------------------------------------------------------------------

class PositionUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gamemessages.PositionUpdate) */ {
 public:
  PositionUpdate();
  virtual ~PositionUpdate();

  PositionUpdate(const PositionUpdate& from);

  inline PositionUpdate& operator=(const PositionUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PositionUpdate(PositionUpdate&& from) noexcept
    : PositionUpdate() {
    *this = ::std::move(from);
  }

  inline PositionUpdate& operator=(PositionUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PositionUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionUpdate* internal_default_instance() {
    return reinterpret_cast<const PositionUpdate*>(
               &_PositionUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PositionUpdate* other);
  friend void swap(PositionUpdate& a, PositionUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PositionUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  PositionUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PositionUpdate& from);
  void MergeFrom(const PositionUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PositionUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gamemessages.Unit players = 1;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 1;
  const ::gamemessages::Unit& players(int index) const;
  ::gamemessages::Unit* mutable_players(int index);
  ::gamemessages::Unit* add_players();
  ::google::protobuf::RepeatedPtrField< ::gamemessages::Unit >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::gamemessages::Unit >&
      players() const;

  // repeated .gamemessages.Unit mobs = 2;
  int mobs_size() const;
  void clear_mobs();
  static const int kMobsFieldNumber = 2;
  const ::gamemessages::Unit& mobs(int index) const;
  ::gamemessages::Unit* mutable_mobs(int index);
  ::gamemessages::Unit* add_mobs();
  ::google::protobuf::RepeatedPtrField< ::gamemessages::Unit >*
      mutable_mobs();
  const ::google::protobuf::RepeatedPtrField< ::gamemessages::Unit >&
      mobs() const;

  // repeated .gamemessages.HitBox hitboxes = 3;
  int hitboxes_size() const;
  void clear_hitboxes();
  static const int kHitboxesFieldNumber = 3;
  const ::gamemessages::HitBox& hitboxes(int index) const;
  ::gamemessages::HitBox* mutable_hitboxes(int index);
  ::gamemessages::HitBox* add_hitboxes();
  ::google::protobuf::RepeatedPtrField< ::gamemessages::HitBox >*
      mutable_hitboxes();
  const ::google::protobuf::RepeatedPtrField< ::gamemessages::HitBox >&
      hitboxes() const;

  // repeated .gamemessages.HitBox mob_hitboxes = 4;
  int mob_hitboxes_size() const;
  void clear_mob_hitboxes();
  static const int kMobHitboxesFieldNumber = 4;
  const ::gamemessages::HitBox& mob_hitboxes(int index) const;
  ::gamemessages::HitBox* mutable_mob_hitboxes(int index);
  ::gamemessages::HitBox* add_mob_hitboxes();
  ::google::protobuf::RepeatedPtrField< ::gamemessages::HitBox >*
      mutable_mob_hitboxes();
  const ::google::protobuf::RepeatedPtrField< ::gamemessages::HitBox >&
      mob_hitboxes() const;

  // @@protoc_insertion_point(class_scope:gamemessages.PositionUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gamemessages::Unit > players_;
  ::google::protobuf::RepeatedPtrField< ::gamemessages::Unit > mobs_;
  ::google::protobuf::RepeatedPtrField< ::gamemessages::HitBox > hitboxes_;
  ::google::protobuf::RepeatedPtrField< ::gamemessages::HitBox > mob_hitboxes_;
  friend struct ::protobuf_playerUpdate_2eproto::TableStruct;
  friend void ::protobuf_playerUpdate_2eproto::InitDefaultsPositionUpdateImpl();
};
// -------------------------------------------------------------------

class TestMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gamemessages.TestMessage) */ {
 public:
  TestMessage();
  virtual ~TestMessage();

  TestMessage(const TestMessage& from);

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestMessage(TestMessage&& from) noexcept
    : TestMessage() {
    *this = ::std::move(from);
  }

  inline TestMessage& operator=(TestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestMessage* internal_default_instance() {
    return reinterpret_cast<const TestMessage*>(
               &_TestMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TestMessage* other);
  friend void swap(TestMessage& a, TestMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  TestMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TestMessage& from);
  void MergeFrom(const TestMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 test = 1;
  bool has_test() const;
  void clear_test();
  static const int kTestFieldNumber = 1;
  ::google::protobuf::int32 test() const;
  void set_test(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gamemessages.TestMessage)
 private:
  void set_has_test();
  void clear_has_test();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 test_;
  friend struct ::protobuf_playerUpdate_2eproto::TableStruct;
  friend void ::protobuf_playerUpdate_2eproto::InitDefaultsTestMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Unit

// required .gamemessages.Point position = 1;
inline bool Unit::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Unit::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Unit::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Unit::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
inline const ::gamemessages::Point& Unit::position() const {
  const ::gamemessages::Point* p = position_;
  // @@protoc_insertion_point(field_get:gamemessages.Unit.position)
  return p != NULL ? *p : *reinterpret_cast<const ::gamemessages::Point*>(
      &::gamemessages::_Point_default_instance_);
}
inline ::gamemessages::Point* Unit::release_position() {
  // @@protoc_insertion_point(field_release:gamemessages.Unit.position)
  clear_has_position();
  ::gamemessages::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::gamemessages::Point* Unit::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::gamemessages::Point;
  }
  // @@protoc_insertion_point(field_mutable:gamemessages.Unit.position)
  return position_;
}
inline void Unit::set_allocated_position(::gamemessages::Point* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
  } else {
    clear_has_position();
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:gamemessages.Unit.position)
}

// required .gamemessages.Point velocity = 2;
inline bool Unit::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Unit::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Unit::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Unit::clear_velocity() {
  if (velocity_ != NULL) velocity_->Clear();
  clear_has_velocity();
}
inline const ::gamemessages::Point& Unit::velocity() const {
  const ::gamemessages::Point* p = velocity_;
  // @@protoc_insertion_point(field_get:gamemessages.Unit.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gamemessages::Point*>(
      &::gamemessages::_Point_default_instance_);
}
inline ::gamemessages::Point* Unit::release_velocity() {
  // @@protoc_insertion_point(field_release:gamemessages.Unit.velocity)
  clear_has_velocity();
  ::gamemessages::Point* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::gamemessages::Point* Unit::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::gamemessages::Point;
  }
  // @@protoc_insertion_point(field_mutable:gamemessages.Unit.velocity)
  return velocity_;
}
inline void Unit::set_allocated_velocity(::gamemessages::Point* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete velocity_;
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:gamemessages.Unit.velocity)
}

// required int32 facing = 5;
inline bool Unit::has_facing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Unit::set_has_facing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Unit::clear_has_facing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Unit::clear_facing() {
  facing_ = 0;
  clear_has_facing();
}
inline ::google::protobuf::int32 Unit::facing() const {
  // @@protoc_insertion_point(field_get:gamemessages.Unit.facing)
  return facing_;
}
inline void Unit::set_facing(::google::protobuf::int32 value) {
  set_has_facing();
  facing_ = value;
  // @@protoc_insertion_point(field_set:gamemessages.Unit.facing)
}

// -------------------------------------------------------------------

// Point

// required int32 x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:gamemessages.Point.x)
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:gamemessages.Point.x)
}

// required int32 y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:gamemessages.Point.y)
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:gamemessages.Point.y)
}

// -------------------------------------------------------------------

// HitBox

// repeated .gamemessages.Point points = 1;
inline int HitBox::points_size() const {
  return points_.size();
}
inline void HitBox::clear_points() {
  points_.Clear();
}
inline const ::gamemessages::Point& HitBox::points(int index) const {
  // @@protoc_insertion_point(field_get:gamemessages.HitBox.points)
  return points_.Get(index);
}
inline ::gamemessages::Point* HitBox::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:gamemessages.HitBox.points)
  return points_.Mutable(index);
}
inline ::gamemessages::Point* HitBox::add_points() {
  // @@protoc_insertion_point(field_add:gamemessages.HitBox.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gamemessages::Point >*
HitBox::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:gamemessages.HitBox.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gamemessages::Point >&
HitBox::points() const {
  // @@protoc_insertion_point(field_list:gamemessages.HitBox.points)
  return points_;
}

// -------------------------------------------------------------------

// PlayerUpdate

// required .gamemessages.Unit player = 1;
inline bool PlayerUpdate::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerUpdate::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerUpdate::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerUpdate::clear_player() {
  if (player_ != NULL) player_->Clear();
  clear_has_player();
}
inline const ::gamemessages::Unit& PlayerUpdate::player() const {
  const ::gamemessages::Unit* p = player_;
  // @@protoc_insertion_point(field_get:gamemessages.PlayerUpdate.player)
  return p != NULL ? *p : *reinterpret_cast<const ::gamemessages::Unit*>(
      &::gamemessages::_Unit_default_instance_);
}
inline ::gamemessages::Unit* PlayerUpdate::release_player() {
  // @@protoc_insertion_point(field_release:gamemessages.PlayerUpdate.player)
  clear_has_player();
  ::gamemessages::Unit* temp = player_;
  player_ = NULL;
  return temp;
}
inline ::gamemessages::Unit* PlayerUpdate::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    player_ = new ::gamemessages::Unit;
  }
  // @@protoc_insertion_point(field_mutable:gamemessages.PlayerUpdate.player)
  return player_;
}
inline void PlayerUpdate::set_allocated_player(::gamemessages::Unit* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_;
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
  } else {
    clear_has_player();
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:gamemessages.PlayerUpdate.player)
}

// -------------------------------------------------------------------

// PositionUpdate

// repeated .gamemessages.Unit players = 1;
inline int PositionUpdate::players_size() const {
  return players_.size();
}
inline void PositionUpdate::clear_players() {
  players_.Clear();
}
inline const ::gamemessages::Unit& PositionUpdate::players(int index) const {
  // @@protoc_insertion_point(field_get:gamemessages.PositionUpdate.players)
  return players_.Get(index);
}
inline ::gamemessages::Unit* PositionUpdate::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:gamemessages.PositionUpdate.players)
  return players_.Mutable(index);
}
inline ::gamemessages::Unit* PositionUpdate::add_players() {
  // @@protoc_insertion_point(field_add:gamemessages.PositionUpdate.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gamemessages::Unit >*
PositionUpdate::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:gamemessages.PositionUpdate.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gamemessages::Unit >&
PositionUpdate::players() const {
  // @@protoc_insertion_point(field_list:gamemessages.PositionUpdate.players)
  return players_;
}

// repeated .gamemessages.Unit mobs = 2;
inline int PositionUpdate::mobs_size() const {
  return mobs_.size();
}
inline void PositionUpdate::clear_mobs() {
  mobs_.Clear();
}
inline const ::gamemessages::Unit& PositionUpdate::mobs(int index) const {
  // @@protoc_insertion_point(field_get:gamemessages.PositionUpdate.mobs)
  return mobs_.Get(index);
}
inline ::gamemessages::Unit* PositionUpdate::mutable_mobs(int index) {
  // @@protoc_insertion_point(field_mutable:gamemessages.PositionUpdate.mobs)
  return mobs_.Mutable(index);
}
inline ::gamemessages::Unit* PositionUpdate::add_mobs() {
  // @@protoc_insertion_point(field_add:gamemessages.PositionUpdate.mobs)
  return mobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gamemessages::Unit >*
PositionUpdate::mutable_mobs() {
  // @@protoc_insertion_point(field_mutable_list:gamemessages.PositionUpdate.mobs)
  return &mobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gamemessages::Unit >&
PositionUpdate::mobs() const {
  // @@protoc_insertion_point(field_list:gamemessages.PositionUpdate.mobs)
  return mobs_;
}

// repeated .gamemessages.HitBox hitboxes = 3;
inline int PositionUpdate::hitboxes_size() const {
  return hitboxes_.size();
}
inline void PositionUpdate::clear_hitboxes() {
  hitboxes_.Clear();
}
inline const ::gamemessages::HitBox& PositionUpdate::hitboxes(int index) const {
  // @@protoc_insertion_point(field_get:gamemessages.PositionUpdate.hitboxes)
  return hitboxes_.Get(index);
}
inline ::gamemessages::HitBox* PositionUpdate::mutable_hitboxes(int index) {
  // @@protoc_insertion_point(field_mutable:gamemessages.PositionUpdate.hitboxes)
  return hitboxes_.Mutable(index);
}
inline ::gamemessages::HitBox* PositionUpdate::add_hitboxes() {
  // @@protoc_insertion_point(field_add:gamemessages.PositionUpdate.hitboxes)
  return hitboxes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gamemessages::HitBox >*
PositionUpdate::mutable_hitboxes() {
  // @@protoc_insertion_point(field_mutable_list:gamemessages.PositionUpdate.hitboxes)
  return &hitboxes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gamemessages::HitBox >&
PositionUpdate::hitboxes() const {
  // @@protoc_insertion_point(field_list:gamemessages.PositionUpdate.hitboxes)
  return hitboxes_;
}

// repeated .gamemessages.HitBox mob_hitboxes = 4;
inline int PositionUpdate::mob_hitboxes_size() const {
  return mob_hitboxes_.size();
}
inline void PositionUpdate::clear_mob_hitboxes() {
  mob_hitboxes_.Clear();
}
inline const ::gamemessages::HitBox& PositionUpdate::mob_hitboxes(int index) const {
  // @@protoc_insertion_point(field_get:gamemessages.PositionUpdate.mob_hitboxes)
  return mob_hitboxes_.Get(index);
}
inline ::gamemessages::HitBox* PositionUpdate::mutable_mob_hitboxes(int index) {
  // @@protoc_insertion_point(field_mutable:gamemessages.PositionUpdate.mob_hitboxes)
  return mob_hitboxes_.Mutable(index);
}
inline ::gamemessages::HitBox* PositionUpdate::add_mob_hitboxes() {
  // @@protoc_insertion_point(field_add:gamemessages.PositionUpdate.mob_hitboxes)
  return mob_hitboxes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gamemessages::HitBox >*
PositionUpdate::mutable_mob_hitboxes() {
  // @@protoc_insertion_point(field_mutable_list:gamemessages.PositionUpdate.mob_hitboxes)
  return &mob_hitboxes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gamemessages::HitBox >&
PositionUpdate::mob_hitboxes() const {
  // @@protoc_insertion_point(field_list:gamemessages.PositionUpdate.mob_hitboxes)
  return mob_hitboxes_;
}

// -------------------------------------------------------------------

// TestMessage

// required int32 test = 1;
inline bool TestMessage::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessage::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessage::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessage::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline ::google::protobuf::int32 TestMessage::test() const {
  // @@protoc_insertion_point(field_get:gamemessages.TestMessage.test)
  return test_;
}
inline void TestMessage::set_test(::google::protobuf::int32 value) {
  set_has_test();
  test_ = value;
  // @@protoc_insertion_point(field_set:gamemessages.TestMessage.test)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamemessages

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_playerUpdate_2eproto__INCLUDED
